<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rory.dao.IUserDao">
    
    <!--定义user的resultMap 一对多-->
    <resultMap id="userAccountMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <result property="address" column="address"></result>
        <!-- 配置user对象中accounts集合的映射 -->
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"></id>
            <result column="uid" property="uid"></result>
            <result column="money" property="money"></result>
        </collection>
    </resultMap>
    
    <select id="findAll" resultMap="userAccountMap">
        select * from user u left outer join account a on u.id = a.uid;
    </select>

    <insert id="saveUser" parameterType="User">
        <!--配置插入数据后获取数据的ID-->
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address});
    </insert>

    <update id="updateUser" parameterType="user">
        update user set username = #{username},birthday=#{birthday},sex=#{sex},address=#{address} where id = #{id};
    </update>

    <delete id="deleteUser" parameterType="Integer">
        delete from user where id = #{id}
    </delete>

    <select id="findById" resultType="User" parameterType="Integer">
        select * from user where id = #{id};
    </select>

    <select id="findByName" parameterType="String" resultType="User">
        select * from user where username like #{username};
    </select>

    <select id="findTotal" resultType="Integer">
        select count(*) from user;
    </select>

    <select id="findUserByVo" resultType="User" parameterType="com.rory.domain.QueryVo">
        select * from user where username like #{user.username}
    </select>

    <sql id="sel_user">
        select * from user
    </sql>
    <!--根据条件查询-->
    <!--<select id="findUserByCondition" resultType="user" parameterType="user">
        select * from user where 1=1
        <if test="username != null">
            and username = #{username}
        </if>

        <if test="sex != null">
            and sex = #{sex}
        </if>
    </select>-->
    <select id="findUserByCondition" resultType="user" parameterType="user">
        <include refid="sel_user"/>
        <where>
            <if test="username != null">
                and username = #{username}
            </if>

            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!--根据query vo的Id集合实现查询用户列表-->
    <select id="findUserByIds" resultType="user" parameterType="com.rory.domain.QueryVo">
        <include refid="sel_user"/>
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

    <!--查询所有角色-->
    <resultMap id="roleMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <result property="address" column="address"></result>

        <collection property="roles" ofType="role">
            <id property="roleId" column="rid"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>

    <select id="findAllRole" resultMap="roleMap">
        select u.*,r.id as rid,r.role_name,r.role_desc from user u
        left outer join user_role ur on u.id = ur.uid
        left outer join role r on r.id = ur.rid;
    </select>
</mapper>